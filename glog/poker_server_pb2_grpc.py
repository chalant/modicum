# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from glog import poker_messages_pb2 as poker__messages__pb2


class PokerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IsReady = channel.unary_unary(
                '/poker.PokerService/IsReady',
                request_serializer=poker__messages__pb2.Empty.SerializeToString,
                response_deserializer=poker__messages__pb2.Empty.FromString,
                )
        self.GetPlayers = channel.unary_stream(
                '/poker.PokerService/GetPlayers',
                request_serializer=poker__messages__pb2.Empty.SerializeToString,
                response_deserializer=poker__messages__pb2.PlayerData.FromString,
                )
        self.GetDealer = channel.stream_unary(
                '/poker.PokerService/GetDealer',
                request_serializer=poker__messages__pb2.PlayerData.SerializeToString,
                response_deserializer=poker__messages__pb2.PlayerData.FromString,
                )
        self.GetPlayerAction = channel.unary_unary(
                '/poker.PokerService/GetPlayerAction',
                request_serializer=poker__messages__pb2.PlayerData.SerializeToString,
                response_deserializer=poker__messages__pb2.ActionData.FromString,
                )
        self.GetPlayerCards = channel.unary_unary(
                '/poker.PokerService/GetPlayerCards',
                request_serializer=poker__messages__pb2.PlayerData.SerializeToString,
                response_deserializer=poker__messages__pb2.CardsData.FromString,
                )
        self.GetBoardCards = channel.unary_unary(
                '/poker.PokerService/GetBoardCards',
                request_serializer=poker__messages__pb2.BoardCardsRequest.SerializeToString,
                response_deserializer=poker__messages__pb2.CardsData.FromString,
                )
        self.GetBlinds = channel.unary_unary(
                '/poker.PokerService/GetBlinds',
                request_serializer=poker__messages__pb2.PlayerData.SerializeToString,
                response_deserializer=poker__messages__pb2.Amount.FromString,
                )
        self.PerformAction = channel.unary_unary(
                '/poker.PokerService/PerformAction',
                request_serializer=poker__messages__pb2.ActionData.SerializeToString,
                response_deserializer=poker__messages__pb2.Empty.FromString,
                )


class PokerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IsReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDealer(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlayerAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlayerCards(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBoardCards(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlinds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PokerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IsReady': grpc.unary_unary_rpc_method_handler(
                    servicer.IsReady,
                    request_deserializer=poker__messages__pb2.Empty.FromString,
                    response_serializer=poker__messages__pb2.Empty.SerializeToString,
            ),
            'GetPlayers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPlayers,
                    request_deserializer=poker__messages__pb2.Empty.FromString,
                    response_serializer=poker__messages__pb2.PlayerData.SerializeToString,
            ),
            'GetDealer': grpc.stream_unary_rpc_method_handler(
                    servicer.GetDealer,
                    request_deserializer=poker__messages__pb2.PlayerData.FromString,
                    response_serializer=poker__messages__pb2.PlayerData.SerializeToString,
            ),
            'GetPlayerAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlayerAction,
                    request_deserializer=poker__messages__pb2.PlayerData.FromString,
                    response_serializer=poker__messages__pb2.ActionData.SerializeToString,
            ),
            'GetPlayerCards': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlayerCards,
                    request_deserializer=poker__messages__pb2.PlayerData.FromString,
                    response_serializer=poker__messages__pb2.CardsData.SerializeToString,
            ),
            'GetBoardCards': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBoardCards,
                    request_deserializer=poker__messages__pb2.BoardCardsRequest.FromString,
                    response_serializer=poker__messages__pb2.CardsData.SerializeToString,
            ),
            'GetBlinds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlinds,
                    request_deserializer=poker__messages__pb2.PlayerData.FromString,
                    response_serializer=poker__messages__pb2.Amount.SerializeToString,
            ),
            'PerformAction': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformAction,
                    request_deserializer=poker__messages__pb2.ActionData.FromString,
                    response_serializer=poker__messages__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'poker.PokerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PokerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IsReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poker.PokerService/IsReady',
            poker__messages__pb2.Empty.SerializeToString,
            poker__messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlayers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/poker.PokerService/GetPlayers',
            poker__messages__pb2.Empty.SerializeToString,
            poker__messages__pb2.PlayerData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDealer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/poker.PokerService/GetDealer',
            poker__messages__pb2.PlayerData.SerializeToString,
            poker__messages__pb2.PlayerData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlayerAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poker.PokerService/GetPlayerAction',
            poker__messages__pb2.PlayerData.SerializeToString,
            poker__messages__pb2.ActionData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlayerCards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poker.PokerService/GetPlayerCards',
            poker__messages__pb2.PlayerData.SerializeToString,
            poker__messages__pb2.CardsData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBoardCards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poker.PokerService/GetBoardCards',
            poker__messages__pb2.BoardCardsRequest.SerializeToString,
            poker__messages__pb2.CardsData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlinds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poker.PokerService/GetBlinds',
            poker__messages__pb2.PlayerData.SerializeToString,
            poker__messages__pb2.Amount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/poker.PokerService/PerformAction',
            poker__messages__pb2.ActionData.SerializeToString,
            poker__messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
